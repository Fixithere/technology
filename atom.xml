<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LMC Technology blog]]></title>
  <link href="http://lmc-eu.github.com/technology//atom.xml" rel="self"/>
  <link href="http://lmc-eu.github.com/technology//"/>
  <updated>2012-11-14T17:34:36+01:00</updated>
  <id>http://lmc-eu.github.com/technology//</id>
  <author>
    <name><![CDATA[LMC s.r.o.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Funny column names]]></title>
    <link href="http://lmc-eu.github.com/technology//blog/2012/11/14/funny-column-names/"/>
    <updated>2012-11-14T17:32:00+01:00</updated>
    <id>http://lmc-eu.github.com/technology//blog/2012/11/14/funny-column-names</id>
    <content type="html"><![CDATA[<h1>JPA, HSQLDB and funny column names</h1>

<p>There is probably no need to introduce <a href="http://hsqldb.org">hsqldb</a>, let&#8217;s just say that it&#8217;s invaluable tool for automated (integration) tests of java/sql code. Especially when combined with Hibernate/JPA and its automatic ddl.</p>

<p>But there are, of course, pitfalls. One of them looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2012-11-08 18:08:46,257] [main] (ERROR) hibernate.tool.hbm2ddl.SchemaExport - HHH000389: Unsuccessful: create table PUBLIC.ADDRESS_CNDP (ADDRESS_ID bigint not null, $SEC_DOMAIN_G2ID bigint, DETAIL varchar(100), GIS_ID varchar(255), NUMBER varchar(16), ORIENTATION_NUMBER varchar(16), STATUS integer, STR_CITY varchar(100), STR_CITYPART varchar(100), STR_COUNTRY varchar(100), STR_DISTRICT varchar(100), STR_REGION varchar(100), STR_STREET varchar(100), STR_TERRITORY varchar(100), TYPE integer, ZIP varchar(255), CITY_ID integer, CITYPART_ID integer, COUNTRY_ID integer, DISTRICT_ID integer, REGION_ID integer, STREET_ID integer, TERRITORY_ID integer, primary key (ADDRESS_ID))
</span><span class='line'>[2012-11-08 18:08:46,257] [main] (ERROR) hibernate.tool.hbm2ddl.SchemaExport - unknown token: </span></code></pre></td></tr></table></div></figure>


<p>Yes, that&#8217;s all - the error message ends by colon. Not really helpful&#8230;</p>

<p>After some digging, the culprit has been found: the &#8220;dollar&#8221; sign <strong>$</strong> in column name. Of course, using such character <del>stupid</del> <em>controversial</em>, but it&#8217;s too late now as the main db2 database is eight year old. The same apply to other <em>controversial</em> column name choices, like <code>ORDER</code>, <code>COUNT</code> or <code>PACKAGE</code>.</p>

<p>Fortunately, both hibernate and JPA hsqldb can handle such names and the solution is actually really simple: just quote them.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//ORDER is reserved word
</span><span class='line'>@Column(name = "\"ORDER\"", nullable = false)
</span><span class='line'>private Integer order;
</span><span class='line'>
</span><span class='line'>//$ is special character!
</span><span class='line'>@Column(name = "\"$SEC_DOMAIN_G2ID\"", updatable = false)
</span><span class='line'>private Long $secDomain;
</span><span class='line'>
</span><span class='line'>//no quoting is needed here
</span><span class='line'>@Column(name = "PARAM", length = 255)
</span><span class='line'>private String param;</span></code></pre></td></tr></table></div></figure>


<p>Hibernate internally converts quotes (they are actually part of JPA2.0 standard) to back-ticks (that&#8217;s hibernate-specific way to escape names) and then back to quotes (in <code>org.hibernate.dialect.HSQLDialect</code>).</p>
]]></content>
  </entry>
  
</feed>
