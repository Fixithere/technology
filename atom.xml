<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LMC Technology blog]]></title>
  <link href="http://lmc-eu.github.com/technology//atom.xml" rel="self"/>
  <link href="http://lmc-eu.github.com/technology//"/>
  <updated>2012-12-08T13:00:48+01:00</updated>
  <id>http://lmc-eu.github.com/technology//</id>
  <author>
    <name><![CDATA[LMC s.r.o.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JPA batch update]]></title>
    <link href="http://lmc-eu.github.com/technology//blog/2012/12/08/jpa-batch-update/"/>
    <updated>2012-12-08T12:34:00+01:00</updated>
    <id>http://lmc-eu.github.com/technology//blog/2012/12/08/jpa-batch-update</id>
    <content type="html"><![CDATA[<p>I&#8217;ve just spent few hours hunting some very weird bug in our new JPA code and found out that hibernate 4 (I don&#8217;t know about other JPA implementations) does not clear cache on HQL batch updates.</p>

<p>This code fill some initial values to previously <code>null</code> columns:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">fillOilife</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">&quot;UPDATE PdjdOrderItem poi SET poi.oilife = :oilife &quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;WHERE poi.pdjdGeneration&gt;0 AND poi.oistate = :oistate AND poi.oilife is NULL&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">query</span><span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">&quot;oilife&quot;</span><span class="o">,</span> <span class="n">INITIAL_OILIFE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">query</span><span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">&quot;oistate&quot;</span><span class="o">,</span> <span class="n">VALID_OISTATE</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">query</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The update is correctly processed into SQL query and executed, but the session cache remains as it is. I&#8217;ve expected hibernate to detect that PdjdOrderItem is being changed and to clear all cached entities (or just the changed ones, but that would be unreasonably complicated). Hibernate, however, does nothing and happily server stale PdjdOrderItem entities with <code>null</code> values.</p>

<p>Solution is quite simple, if a little annoying: clear the cache by explicit <code>clear()</code> call:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">fillOilife</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">em</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>        <span class="n">em</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">&quot;UPDATE PdjdOrderItem poi SET poi.oilife = :oilife &quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;WHERE poi.pdjdGeneration&gt;0 AND poi.oistate = :oistate AND poi.oilife is NULL&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">query</span><span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">&quot;oilife&quot;</span><span class="o">,</span> <span class="n">INITIAL_OILIFE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">query</span><span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">&quot;oistate&quot;</span><span class="o">,</span> <span class="n">VALID_OISTATE</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">query</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I still feel disappointed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JPA, HSQLDB and Funny column names]]></title>
    <link href="http://lmc-eu.github.com/technology//blog/2012/11/14/funny-column-names/"/>
    <updated>2012-11-14T17:32:00+01:00</updated>
    <id>http://lmc-eu.github.com/technology//blog/2012/11/14/funny-column-names</id>
    <content type="html"><![CDATA[<p>There is probably no need to introduce <a href="http://hsqldb.org">hsqldb</a>, let&#8217;s just say that it&#8217;s invaluable tool for automated (integration) tests of java/sql code. Especially when combined with Hibernate/JPA and its automatic ddl.</p>

<p>There are, however, pitfalls. One of them looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2012-11-08 18:08:46,257] [main] (ERROR) hibernate.tool.hbm2ddl.SchemaExport - HHH000389: Unsuccessful: create table PUBLIC.ADDRESS_CNDP (ADDRESS_ID bigint not null, $SEC_DOMAIN_G2ID bigint, DETAIL varchar(100), GIS_ID varchar(255), NUMBER varchar(16), ORIENTATION_NUMBER varchar(16), STATUS integer, STR_CITY varchar(100), STR_CITYPART varchar(100), STR_COUNTRY varchar(100), STR_DISTRICT varchar(100), STR_REGION varchar(100), STR_STREET varchar(100), STR_TERRITORY varchar(100), TYPE integer, ZIP varchar(255), CITY_ID integer, CITYPART_ID integer, COUNTRY_ID integer, DISTRICT_ID integer, REGION_ID integer, STREET_ID integer, TERRITORY_ID integer, primary key (ADDRESS_ID))
</span><span class='line'>[2012-11-08 18:08:46,257] [main] (ERROR) hibernate.tool.hbm2ddl.SchemaExport - unknown token: </span></code></pre></td></tr></table></div></figure>


<p>Yes, that&#8217;s all - the error message ends by colon. Not really helpful&#8230;</p>

<p>After some digging, the culprit has been found: the &#8220;dollar&#8221; sign <strong>$</strong> in column name. Of course, using such character is <del>stupid</del> <em>controversial</em>, but it&#8217;s too late now - the main db2 database is already eight years old and changing column name without real reason is overkill. Similar problem happens with other <em>controversial</em> column name choices, like <code>ORDER</code>, <code>COUNT</code> or <code>PACKAGE</code>.</p>

<p>Fortunately, both hibernate and JPA hsqldb can handle such names and the solution is actually quite simple: just quote them.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">//ORDER is reserved word</span>
</span><span class='line'>    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;\&quot;ORDER\&quot;&quot;</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">order</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//$ is special character!</span>
</span><span class='line'>    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;\&quot;$SEC_DOMAIN_G2ID\&quot;&quot;</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Long</span> <span class="n">$secDomain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//no quoting is needed here</span>
</span><span class='line'>    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;PARAM&quot;</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">255</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">param</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hibernate internally converts quotes (they are actually part of JPA2.0 standard) to back-ticks (that&#8217;s hibernate-specific way to escape names) and then back to quotes (in <code>org.hibernate.dialect.HSQLDialect</code>).</p>
]]></content>
  </entry>
  
</feed>
